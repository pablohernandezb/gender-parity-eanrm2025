plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
xlim(20, 80) +
ylim(20, 80)
# Muestra el scatterplot
print(scatterplot_color_size_paridad)
# Define el título común para la leyenda
legend_title <- "Paridad\nAlcalde(sa) (%)"
# Crea el scatterplot con el tamaño y color del punto según Paridad_Alcalde
scatterplot_combined_legend <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
geom_point(alpha = 0.8) +
scale_size_continuous(
name = legend_title, # Título de la leyenda para el tamaño
range = c(2, 10)
) +
scale_color_gradient(
name = legend_title, # ¡Mismo título para la leyenda de color!
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Relación entre Paridad en Concejo (Lista vs. Nominal)",
subtitle = "Tamaño y color del punto: Paridad de Alcalde(sa)",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
# Se eliminaron 'size' y 'color' de labs(), ya que el título
# se define en las funciones scale_*
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
xlim(0, 100) +
ylim(0, 100)
# Muestra el scatterplot
print(scatterplot_combined_legend)
# Suponiendo que 'municipal_parity_metrics' ya ha sido creada y contiene
# las columnas 'Paridad_Lista', 'Paridad_Nominal' y 'Paridad_Alcalde'.
# Define el título común para la leyenda
legend_title <- "Paridad\nAlcalde(sa) (%)"
# Crea el scatterplot con el tamaño y color del punto según Paridad_Alcalde
scatterplot_combined_legend <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
geom_point(alpha = 0.8) +
scale_size_continuous(
name = legend_title, # Título de la leyenda para el tamaño
range = c(2, 10)
) +
scale_color_gradient(
name = legend_title, # ¡Mismo título para la leyenda de color!
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Relación entre Paridad en Concejo (Lista vs. Nominal)",
subtitle = "Tamaño y color del punto: Paridad de Alcalde(sa)",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
# Se eliminaron 'size' y 'color' de labs(), ya que el título
# se define en las funciones scale_*
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
xlim(0, 100) +
ylim(0, 100)
# Muestra el scatterplot
print(scatterplot_combined_legend)
# Define el título común para la leyenda
legend_title <- "Paridad\nAlcalde(sa) (%)"
# Crea el scatterplot con leyendas combinadas forzadas
scatterplot_combined_legend_forced <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
geom_point(alpha = 0.8) +
scale_size_continuous(
# Establece 'guide = "none"' para suprimir la leyenda de tamaño
range = c(2, 10),
guide = "none"
) +
scale_color_gradient(
name = legend_title, # Este será el título de la leyenda principal
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Relación entre Paridad en Concejo (Lista vs. Nominal)",
subtitle = "Tamaño y color del punto: Paridad de Alcalde(sa)",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
# Fuerza la leyenda combinada usando guides()
guides(
color = guide_colorbar(
title = legend_title, # Usa el título común
# Con 'override.aes', los puntos en la leyenda de color también variarán de tamaño
# Esto hace que la leyenda de color represente ambos estéticos
override.aes = list(
size = seq(from = 2, to = 10, length.out = 5) # Muestra 5 tamaños de puntos en la leyenda
)
)
) +
xlim(0, 100) +
ylim(0, 100)
# Muestra el scatterplot
print(scatterplot_combined_legend_forced)
# Define el título común para la leyenda
legend_title <- "Paridad\nAlcalde(sa) (%)"
# Crea el scatterplot con leyendas combinadas forzadas
scatterplot_combined_legend_forced <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
geom_point(alpha = 0.8) +
scale_size_continuous(
# Establece 'guide = "none"' para suprimir la leyenda de tamaño
range = c(2, 10),
guide = "none"
) +
scale_color_gradient(
name = legend_title, # Este será el título de la leyenda principal
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Relación entre Paridad en Concejo (Lista vs. Nominal)",
subtitle = "Tamaño y color del punto: Paridad de Alcalde(sa)",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
# Fuerza la leyenda combinada usando guides()
guides(
color = guide_colorbar(
title = legend_title, # Usa el título común
# Con 'override.aes', los puntos en la leyenda de color también variarán de tamaño
# Esto hace que la leyenda de color represente ambos estéticos
override.aes = list(
size = seq(from = 2, to = 10, length.out = 5) # Muestra 5 tamaños de puntos en la leyenda
)
)
) +
xlim(20, 80) +
ylim(20, 80)
# Muestra el scatterplot
print(scatterplot_combined_legend_forced)
# Define el título común para la leyenda
legend_title <- "Paridad\nAlcalde(sa) (%)"
# Crea el scatterplot con leyendas combinadas forzadas
scatterplot_combined_legend_forced <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
geom_point(alpha = 0.8) +
scale_size_continuous(
# Establece 'guide = "none"' para suprimir la leyenda de tamaño
range = c(2, 10),
guide = "none"
) +
scale_color_gradient(
name = legend_title, # Este será el título de la leyenda principal
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Componentes del Índice de Paridad Municipal",
subtitle = "Elecciones Locales del 27 de julio en Venezuela",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
# Fuerza la leyenda combinada usando guides()
guides(
color = guide_colorbar(
title = legend_title, # Usa el título común
# Con 'override.aes', los puntos en la leyenda de color también variarán de tamaño
# Esto hace que la leyenda de color represente ambos estéticos
override.aes = list(
size = seq(from = 2, to = 10, length.out = 5) # Muestra 5 tamaños de puntos en la leyenda
)
)
) +
xlim(20, 80) +
ylim(20, 80)
# Muestra el scatterplot
print(scatterplot_combined_legend_forced)
# Crea el scatterplot con leyendas combinadas forzadas
scatterplot_combined_legend_forced <- ggplot(municipal_parity_metrics, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Paridad_Alcalde
)) +
# Usa geom_jitter() en lugar de geom_point()
# Puedes ajustar 'width' y 'height' para controlar la cantidad de jitter
geom_jitter(alpha = 0.8, width = 0.5, height = 0.5) +
scale_size_continuous(
# Establece 'guide = "none"' para suprimir la leyenda de tamaño
range = c(2, 10),
guide = "none"
) +
scale_color_gradient(
name = legend_title, # Este será el título de la leyenda principal
low = "green",
high = "orange",
limits = c(0, 100)
) +
labs(
title = "Componentes del Índice de Paridad Municipal",
subtitle = "Elecciones Locales del 27 de julio en Venezuela",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
# Fuerza la leyenda combinada usando guides()
guides(
color = guide_colorbar(
title = legend_title, # Usa el título común
# Con 'override.aes', los puntos en la leyenda de color también variarán de tamaño
# Esto hace que la leyenda de color represente ambos estéticos
override.aes = list(
size = seq(from = 2, to = 10, length.out = 5) # Muestra 5 tamaños de puntos en la leyenda
)
)
) +
xlim(20, 80) +
ylim(20, 80)
# Muestra el scatterplot
print(scatterplot_combined_legend_forced)
# Paso 1: Crear columnas booleanas para cada condición de 50% o más
municipal_parity_flags <- municipal_parity_metrics %>%
mutate(
over_50_alcalde = Paridad_Alcalde >= 50,
over_50_nominal = Paridad_Nominal >= 50,
over_50_lista = Paridad_Lista >= 50
)
# Paso 2: Calcular las cuentas para cada condición y combinación
parity_counts_table <- tribble(
~Condition, ~Count,
"Paridad Alcalde >= 50%", sum(municipal_parity_flags$over_50_alcalde, na.rm = TRUE),
"Paridad Nominal >= 50%", sum(municipal_parity_flags$over_50_nominal, na.rm = TRUE),
"Paridad Lista >= 50%", sum(municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Alcalde Y Nominal >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_nominal, na.rm = TRUE),
"Alcalde Y Lista >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Nominal Y Lista >= 50%", sum(municipal_parity_flags$over_50_nominal & municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Alcalde Y Nominal Y Lista >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_nominal & municipal_parity_flags$over_50_lista, na.rm = TRUE)
)
# Imprimir la tabla de resultados
print(parity_counts_table)
# Paso 1: Crear columnas booleanas para cada condición de 50% o más
municipal_parity_flags <- municipal_parity_metrics %>%
mutate(
over_50_alcalde = Paridad_Alcalde >= 50,
over_50_nominal = Paridad_Nominal >= 50,
over_50_lista = Paridad_Lista >= 50
)
# Paso 2: Calcular las cuentas para cada condición y combinación
parity_counts_table <- tribble(
~Condition, ~Count,
"Paridad Alcalde >= 50%", sum(municipal_parity_flags$over_50_alcalde, na.rm = TRUE),
"Paridad Nominal >= 50%", sum(municipal_parity_flags$over_50_nominal, na.rm = TRUE),
"Paridad Lista >= 50%", sum(municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Alcalde Y Nominal >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_nominal, na.rm = TRUE),
"Alcalde Y Lista >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Nominal Y Lista >= 50%", sum(municipal_parity_flags$over_50_nominal & municipal_parity_flags$over_50_lista, na.rm = TRUE),
"Alcalde Y Nominal Y Lista >= 50%", sum(municipal_parity_flags$over_50_alcalde & municipal_parity_flags$over_50_nominal & municipal_parity_flags$over_50_lista, na.rm = TRUE)
)
# Paso 3: Calcular el número total de municipios
total_municipalities <- nrow(municipal_parity_metrics)
# Paso 4: Añadir la columna de porcentaje
parity_counts_table_with_percentage <- parity_counts_table %>%
mutate(
Percentage = (Count / total_municipalities) * 100
)
# Imprimir la tabla de resultados con porcentajes
print(parity_counts_table_with_percentage)
# Calculate counts and percentages for each gender
gender_counts_percentages <- election_3_data %>%
count(gender) %>% # This counts the occurrences (n) of each gender
mutate(percentage = (n / sum(n)) * 100) # This calculates the percentage
# Print the resulting table, which will show both the 'n' (count) and 'percentage'
print(gender_counts_percentages)
# Calculate counts and percentages for each gender
gender_counts_percentages <- election_15_data %>%
count(gender) %>% # This counts the occurrences (n) of each gender
mutate(percentage = (n / sum(n)) * 100) # This calculates the percentage
# Print the resulting table, which will show both the 'n' (count) and 'percentage'
print(gender_counts_percentages)
# Calculate counts and percentages for each gender
gender_counts_percentages <- election_16_data %>%
count(gender) %>% # This counts the occurrences (n) of each gender
mutate(percentage = (n / sum(n)) * 100) # This calculates the percentage
# Print the resulting table, which will show both the 'n' (count) and 'percentage'
print(gender_counts_percentages)
# Calculate counts and percentages for each gender
gender_counts_percentages <- election_17_data %>%
count(gender) %>% # This counts the occurrences (n) of each gender
mutate(percentage = (n / sum(n)) * 100) # This calculates the percentage
# Print the resulting table, which will show both the 'n' (count) and 'percentage'
print(gender_counts_percentages)
219+820
2947+2979
3874+4638
159+153
1039+5926+8512+312
# Paso 1 y 2: Crear una nueva columna categórica 'Parity_Category'
# Esta columna clasificará cada municipio según sus niveles de paridad.
municipal_parity_classified <- municipal_parity_flags %>%
mutate(
Parity_Category = case_when(
over_50_alcalde & over_50_nominal & over_50_lista ~ "Todas 3 >= 50%",
over_50_alcalde & over_50_nominal ~ "Alcalde y Nominal >= 50%",
over_50_alcalde & over_50_lista ~ "Alcalde y Lista >= 50%",
over_50_nominal & over_50_lista ~ "Nominal y Lista >= 50%",
over_50_alcalde ~ "Solo Alcalde >= 50%",
over_50_nominal ~ "Solo Nominal >= 50%",
over_50_lista ~ "Solo Lista >= 50%",
TRUE ~ "Ninguna >= 50%" # Para municipios que no cumplen ninguna de las anteriores
)
)
library(dplyr)
library(tidyr)
library(ggplot2)
library(purrr)
library(stringr)
library(patchwork)
library(cowplot)
# Paso 1 y 2: Crear una nueva columna categórica 'Parity_Category'
# Esta columna clasificará cada municipio según sus niveles de paridad.
municipal_parity_classified <- municipal_parity_flags %>%
mutate(
Parity_Category = case_when(
over_50_alcalde & over_50_nominal & over_50_lista ~ "Todas 3 >= 50%",
over_50_alcalde & over_50_nominal ~ "Alcalde y Nominal >= 50%",
over_50_alcalde & over_50_lista ~ "Alcalde y Lista >= 50%",
over_50_nominal & over_50_lista ~ "Nominal y Lista >= 50%",
over_50_alcalde ~ "Solo Alcalde >= 50%",
over_50_nominal ~ "Solo Nominal >= 50%",
over_50_lista ~ "Solo Lista >= 50%",
TRUE ~ "Ninguna >= 50%" # Para municipios que no cumplen ninguna de las anteriores
)
)
# Paso 3: Regenerar el scatterplot con color por la nueva categoría
scatterplot_classified_color <- ggplot(municipal_parity_classified, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Parity_Category # ¡Aquí se usa la nueva variable categórica para el color!
)) +
geom_jitter(alpha = 0.8, width = 0.5, height = 0.5) +
scale_size_continuous(
range = c(2, 10),
name = "Paridad\nAlcalde(sa) (%)" # Título de la leyenda para el tamaño
) +
# Para variables categóricas, scale_color_discrete() asigna colores automáticamente.
# Puedes usar scale_color_manual() si quieres colores específicos para cada categoría.
scale_color_discrete(name = "Clasificación de Paridad") + # Título de la leyenda para el color
labs(
title = "Paridad en Concejo (Lista vs. Nominal) por Clasificación de Paridad",
subtitle = "Tamaño del punto: Paridad de Alcalde(sa) | Color: Clasificación",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
xlim(0, 100) +
ylim(0, 100)
# Muestra el scatterplot
print(scatterplot_classified_color)
# Paso 1: Definir el orden deseado de las categorías (¡tal cual como las quieres en la leyenda!)
category_order <- c(
"Todas",
"Alcalde(sa) y Nominal",
"Alcalde(sa) y Lista",
"Nominal y Lista",
"Alcalde(sa)",
"Nominal",
"Lista",
"Ninguna"
)
# Paso 2: Crear la columna categórica 'Parity_Category'
# y reordenar sus niveles de factor según 'category_order'.
municipal_parity_classified <- municipal_parity_flags %>%
mutate(
Parity_Category = case_when(
over_50_alcalde & over_50_nominal & over_50_lista ~ "Todas",
over_50_alcalde & over_50_nominal ~ "Alcalde(sa) y Nominal",
over_50_alcalde & over_50_lista ~ "Alcalde(sa) y Lista",
over_50_nominal & over_50_lista ~ "Nominal y Lista",
over_50_alcalde ~ "Alcalde(sa)",
over_50_nominal ~ "Nominal",
over_50_lista ~ "Lista",
TRUE ~ "Ninguna"
),
# ¡Importante! Convertir a factor y establecer los niveles para el orden
Parity_Category = factor(Parity_Category, levels = category_order)
)
# Paso 3: Generar una secuencia de colores para el degradado discreto
# El color más alto (naranja) para "Todas" y el más bajo (verde) para "Ninguna".
start_color <- "orange"
end_color <- "green"
# Crear una función de paleta de colores
color_palette_func <- colorRampPalette(c(start_color, end_color))
# Generar la cantidad de colores necesaria (según el número de categorías)
num_categories <- length(category_order)
gradient_colors <- color_palette_func(num_categories)
# Asignar los nombres de las categorías a los colores generados,
# asegurando que el orden de los colores coincida con el orden de las categorías.
names(gradient_colors) <- category_order
# Paso 4: Regenerar el scatterplot con la paleta de colores manual y el orden
scatterplot_custom_color_order <- ggplot(municipal_parity_classified, aes(
x = Paridad_Lista,
y = Paridad_Nominal,
size = Paridad_Alcalde,
color = Parity_Category # Usa la variable categórica reordenada
)) +
geom_jitter(alpha = 0.8, width = 0.5, height = 0.5) +
scale_size_continuous(
range = c(2, 10),
name = "Paridad\nAlcalde(sa) (%)"
) +
# Usar scale_color_manual para asignar tus colores específicos
scale_color_manual(
values = gradient_colors, # La paleta de colores generada
name = "Clasificación de Paridad" # Título de la leyenda de color
) +
labs(
title = "Paridad en Concejo (Lista vs. Nominal) por Clasificación",
subtitle = "Tamaño: Paridad de Alcalde(sa) | Color: Clasificación de Paridad",
x = "Paridad de Concejal(a) por Lista (%)",
y = "Paridad de Concejal(a) Nominal (%)"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
plot.subtitle = element_text(hjust = 0.5, size = 10, color = "gray50"),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10),
legend.title = element_text(size = 10, face = "bold")
) +
xlim(20, 80) +
ylim(20, 80)
# Muestra el scatterplot
print(scatterplot_custom_color_order)

em2025 <- em2025 %>%
mutate(state_description = gsub("BOLIVARIANO DE ", "", state_description))
em2025 <- em2025 %>%
mutate(state_description = gsub("DISTRITO ", "DTTO ", state_description))
em2025 <- em2025 %>%
mutate(state_description = gsub("AMAC", "AMACURO", state_description))
em2025_cleaned <- em2025 %>%
group_by(cod_state) %>%
summarise(
state_description = first(state_description), # O puedes usar mode(state_description) para el más frecuente
gender_M = sum(gender == "M"),
gender_F = sum(gender == "F"),
total_state = n(),
.groups = 'drop'
) %>%
mutate(
percentage_M = ifelse(total_state > 0, (gender_M / total_state) * 100, 0),
percentage_F = ifelse(total_state > 0, (gender_F / total_state) * 100, 0)
)
# Preparar los datos para el gráfico
plot_data <- em2025_cleaned %>%
select(cod_state, state_description, percentage_M, percentage_F) %>%
pivot_longer(cols = starts_with("percentage"),
names_to = "gender",
values_to = "percentage") %>%
mutate(gender = recode(gender,
"percentage_M" = "M",
"percentage_F" = "F"))
# Crear el gráfico de barras
ggplot(plot_data, aes(x = state_description, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(title = "Porcentaje de Género por Estado",
x = "Estado",
y = "Porcentaje",
fill = "Género") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear una lista de dataframes, uno por cada election_type_id
dataframes_by_election_type <- em2025 %>%
group_split(election_type_id) %>%
set_names(paste0("election_type_", unique(em2025$election_type_id))) # Nombra los dataframes en la lista
for (name in names(dataframes_by_election_type)) {
cat("Dataframe:", name, "tiene", nrow(dataframes_by_election_type[[name]]), "filas\n")
}
View(em2025)
names(dataframes_by_election_type)<-c("election_type_3","election_type_15","election_type_16","election_type_17")
for (name in names(dataframes_by_election_type)) {
cat("Dataframe:", name, "tiene", nrow(dataframes_by_election_type[[name]]), "filas\n")
}
total_candidatos_por_tipo <- sapply(dataframes_by_election_type, nrow)
print(total_candidatos_por_tipo)
resultados_genero_por_tipo <- lapply(dataframes_by_election_type, function(df) {
df %>%
group_by(gender) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = count / sum(count) * 100)
})
print(resultados_genero_por_tipo)
# Preparar los datos para graficar
plot_data_list <- lapply(names(resultados_genero_por_tipo), function(election_type) {
resultados_genero_por_tipo[[election_type]] %>%
mutate(election_type = election_type)
}) %>%
bind_rows()
election_type_order <- c("election_type_3", "election_type_15", "election_type_16", "election_type_17")
election_type_labels <- c("Alcalde(sa)", "Concejal(a) Nominal", "Concejal(a) Lista", "Concejal(a) Indígena")
plot_data_list$election_type <- factor(plot_data_list$election_type, levels = election_type_order, labels = election_type_labels)
# Crear el gráfico de barras
ggplot(plot_data_list, aes(x = election_type, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Tipo de Elección",
x = "",
y = "Porcentaje (%)",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 3
election_3_data <- em2025 %>%
filter(election_type_id == 3)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_3_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado para la elección a Gobernador(a)",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_2.png", width = 12, height = 8)
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado para la elección a Alcalde(sa)",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 15
election_15_data <- em2025 %>%
filter(election_type_id == 15)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_15_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Concejal(a) Nominal",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_7.png", width = 12, height = 8)
# 2. Filtrar por election_type_id = 17
election_17_data <- em2025 %>%
filter(election_type_id == 17)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_17_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Legislador(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_13.png", width = 12, height = 8)
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Concejal(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
em2025 <- read.csv("dataset_em2025_candidatos.csv", header = TRUE, sep = ",", stringsAsFactors = FALSE, encoding = "UTF-8")
# 1.1 Limpiar la columna state_description eliminando "EDO. "
em2025 <- em2025 %>%
mutate(state_description = gsub("EDO. ", "", state_description))
em2025 <- em2025 %>%
mutate(state_description = gsub("BOLIVARIANO DE ", "", state_description))
em2025 <- em2025 %>%
mutate(state_description = gsub("DISTRITO ", "DTTO ", state_description))
# EM2025: Agrupar por cod_state y tomar el primer state_description (o el más frecuente)
em2025_cleaned <- em2025 %>%
group_by(cod_state) %>%
summarise(
state_description = first(state_description), # O puedes usar mode(state_description) para el más frecuente
gender_M = sum(gender == "M"),
gender_F = sum(gender == "F"),
total_state = n(),
.groups = 'drop'
) %>%
mutate(
percentage_M = ifelse(total_state > 0, (gender_M / total_state) * 100, 0),
percentage_F = ifelse(total_state > 0, (gender_F / total_state) * 100, 0)
)
# Preparar los datos para el gráfico
plot_data <- em2025_cleaned %>%
select(cod_state, state_description, percentage_M, percentage_F) %>%
pivot_longer(cols = starts_with("percentage"),
names_to = "gender",
values_to = "percentage") %>%
mutate(gender = recode(gender,
"percentage_M" = "M",
"percentage_F" = "F"))
# Crear el gráfico de barras
ggplot(plot_data, aes(x = state_description, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(title = "Porcentaje de Género por Estado",
x = "Estado",
y = "Porcentaje",
fill = "Género") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Crear una lista de dataframes, uno por cada election_type_id
dataframes_by_election_type <- em2025 %>%
group_split(election_type_id) %>%
set_names(paste0("election_type_", unique(em2025$election_type_id))) # Nombra los dataframes en la lista
names(dataframes_by_election_type)<-c("election_type_3","election_type_15","election_type_16","election_type_17")
for (name in names(dataframes_by_election_type)) {
cat("Dataframe:", name, "tiene", nrow(dataframes_by_election_type[[name]]), "filas\n")
}
total_candidatos_por_tipo <- sapply(dataframes_by_election_type, nrow)
print(total_candidatos_por_tipo)
# O para calcular el porcentaje de hombres y mujeres en cada tipo de elección:
resultados_genero_por_tipo <- lapply(dataframes_by_election_type, function(df) {
df %>%
group_by(gender) %>%
summarise(count = n(), .groups = 'drop') %>%
mutate(percentage = count / sum(count) * 100)
})
print(resultados_genero_por_tipo)
# Si quieres guardar cada dataframe en un archivo CSV separado:
# for (name in names(dataframes_by_election_type)) {
#   write.csv(dataframes_by_election_type[[name]], paste0(name, ".csv"), row.names = FALSE, fileEncoding = "UTF-8")
# }
# Preparar los datos para graficar
plot_data_list <- lapply(names(resultados_genero_por_tipo), function(election_type) {
resultados_genero_por_tipo[[election_type]] %>%
mutate(election_type = election_type)
}) %>%
bind_rows()
election_type_order <- c("election_type_3", "election_type_15", "election_type_16", "election_type_17")
election_type_labels <- c("Alcalde(sa)", "Concejal(a) Nominal", "Concejal(a) Lista", "Concejal(a) Indígena")
plot_data_list$election_type <- factor(plot_data_list$election_type, levels = election_type_order, labels = election_type_labels)
ggplot(plot_data_list, aes(x = election_type, y = percentage, fill = gender)) +
geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Tipo de Elección",
x = "",
y = "Porcentaje (%)",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 2
election_2_data <- eanr2025 %>%
filter(election_type_id == 2)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_2_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado para la elección a Gobernador(a)",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 3
election_3_data <- em2025 %>%
filter(election_type_id == 3)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_3_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado para la elección a Alcalde(sa)",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
election_15_data <- em2025 %>%
filter(election_type_id == 15)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_15_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Concejal(a) Nominal",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# 2. Filtrar por election_type_id = 17
election_17_data <- em2025 %>%
filter(election_type_id == 17)
# 3. Contar candidatos por estado, género y list_order
conteo_candidatos <- election_17_data %>%
group_by(state_description, gender, list_order) %>%
summarise(cantidad = n(), .groups = 'drop') %>%
group_by(state_description, list_order) %>%
mutate(porcentaje = cantidad / sum(cantidad) * 100) %>%
ungroup()
# 4. Preparar los datos para el gráfico (opcional, pero recomendado para ggplot2)
#  En este caso, los datos ya están en un formato adecuado para graficar barras apiladas o agrupadas.
# 5.  Crear el gráfico de barras
ggplot(conteo_candidatos, aes(x = state_description, y = porcentaje, fill = gender)) +
geom_bar(stat = "identity", position = "stack") + # o "stack" para barras apiladas
facet_wrap(~list_order, labeller = labeller(list_order = c("1" = "Principal", "2" = "Suplente"))) +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Porcentaje de Género por Estado y posición para la elección a Concejal(a) Indígena",
x = "",
y = "Porcentaje",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 15
election_15_data <- em2025 %>%
filter(election_type_id == 15)
# 3. Crear los boxplots
ggplot(election_15_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Concejal(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("gender_percentage_by_state_election_type_13.png", width = 12, height = 8)
# Filtrar por election_type_id = 16
election_15_data <- em2025 %>%
filter(election_type_id == 16)
# 3. Crear los boxplots
ggplot(election_16_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Concejal(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Filtrar por election_type_id = 16
election_16_data <- em2025 %>%
filter(election_type_id == 16)
# 3. Crear los boxplots
ggplot(election_16_data, aes(x = state_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = "Distribución de candidatos en las listas a Concejal(a)",
x = "Estado",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Guardar el gráfico (opcional)
# ggsave("list_order_boxplots_election_type_16.png", width = 12, height = 8)
unique_states <- unique(election_16_data$state_description)
library(stringr)
for (state_name in unique_states) {
state_data <- election_16_data %>%
filter(state_description == state_name)
plot_title <- paste("Distribución de candidatos en las listas a Concejal(a) en", str_to_title(tolower(state_name)))
p <- ggplot(state_data, aes(x = municipality_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = plot_title,
x = "Municipio",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Print the plot to display it
# Optional: Save the plot to a file
ggsave(filename = paste0("fig_pos_diputado_lista_", state_name, ".png"), plot = p, width = 10, height = 6)
}
rlang::last_trace()
rlang::last_trace(drop = FALSE)
election_16_data <- em2025 %>%
filter(election_type_id == 16)
unique_states <- unique(election_16_data$code_state)
# 3. Crear los boxplots
# Loop through each state to create a separate plot
# You can uncomment this loop if you want separate plots per state
for (state_id in unique_states) {
state_data <- election_16_data %>%
filter(cod_state == state_id)
plot_title <- paste("Distribución de candidatos en las listas a Concejal(a) en", str_to_title(tolower(state_id)))
p <- ggplot(state_data, aes(x = municipality_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = plot_title,
x = "Municipio",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Print the plot to display it
# Optional: Save the plot to a file
ggsave(filename = paste0("fig_pos_concejal_lista_", state_id, ".png"), plot = p, width = 10, height = 6)
}
election_16_data <- em2025 %>%
filter(election_type_id == 16)
unique_states <- unique(election_16_data$code_state)
# 3. Crear los boxplots
# Loop through each state to create a separate plot
# You can uncomment this loop if you want separate plots per state
for (state_id in unique_states) {
state_data <- election_16_data %>%
filter(code_state == state_id)
plot_title <- paste("Distribución de candidatos en las listas a Concejal(a) en", str_to_title(tolower(state_id)))
p <- ggplot(state_data, aes(x = municipality_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = plot_title,
x = "Municipio",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Print the plot to display it
# Optional: Save the plot to a file
ggsave(filename = paste0("fig_pos_concejal_lista_", state_id, ".png"), plot = p, width = 10, height = 6)
}
election_16_data <- em2025 %>%
filter(election_type_id == 16)
unique_states <- unique(election_16_data$cod_state)
# 3. Crear los boxplots
# Loop through each state to create a separate plot
# You can uncomment this loop if you want separate plots per state
for (state_id in unique_states) {
state_data <- election_16_data %>%
filter(cod_state == state_id)
plot_title <- paste("Distribución de candidatos en las listas a Concejal(a) en", str_to_title(tolower(state_id)))
p <- ggplot(state_data, aes(x = municipality_description, y = list_order, fill = gender)) +
geom_boxplot() +
scale_fill_manual(values = c("M" = "green", "F" = "orange")) +
labs(
title = plot_title,
x = "Municipio",
y = "Posición en la lista",
fill = "Género"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(p) # Print the plot to display it
# Optional: Save the plot to a file
ggsave(filename = paste0("fig_pos_concejal_lista_", state_id, ".png"), plot = p, width = 10, height = 6)
}
